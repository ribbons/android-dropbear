---
# Copyright Â© 2020-2024 Matt Robinson
#
# SPDX-License-Identifier: MIT

name: Build
on:
  push:
    branches-ignore:
      - dependabot/**
      - update-version
  pull_request:
  schedule:
    - cron: '30 12 * * 5'

jobs:
  compile:
    name: Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - armv7a-linux-androideabi
          - aarch64-linux-android
          - i686-linux-android
          - x86_64-linux-android
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build script
        run: |
          ndk="$($ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
                 --list_installed | sed -E 's/( +[|] +)/|/g;s/ +$//' | \
                 grep '^  ndk' | cut -d '|' -f 4 | sort | head -n1)"
          ANDROID_NDK_HOME="$ANDROID_HOME/$ndk" ./build
        env:
          TARGET: ${{ matrix.target }}

      - name: Collect binaries and build info
        run: |
          mkdir output
          cp dropbear/dropbear output
          cp dropbear/dbclient output
          cp dropbear/dropbearkey output
          cp dropbear/dropbearconvert output
          cp dropbear/scp output
          cp dropbear/LICENSE output/LICENSE.txt

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: output

      - name: Upload build info as artifact
        if: matrix.target == 'armv7a-linux-androideabi'
        uses: actions/upload-artifact@v4
        with:
          name: buildinfo
          path: buildinfo

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: compile

    steps:
      - name: Fetch artifacts
        uses: actions/download-artifact@v4

      - name: Extract info to environment vars
        run: |
          echo "BUILD_RELEASE=$(cat buildinfo/release)" >> "$GITHUB_ENV"
          echo "NDK_VERSION=$(cat buildinfo/ndkver)" >> "$GITHUB_ENV"
          echo "JAR_VERSION=$(cat buildinfo/release | \
                sed 's/^DROPBEAR_//;s/p/./')" >> "$GITHUB_ENV"

      - name: Latest release tag name
        id: latest_release
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const query = `query release($owner:String!, $repo:String!) {
              repository(owner:$owner, name:$repo) {
                releases(first:1, orderBy:{field:CREATED_AT, direction:DESC}) {
                  nodes {
                    tagName
                  }
                }
              }
            }`
            const vars = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            }
            const result = await github.graphql(query, vars)
            return result.repository.releases.nodes[0].tagName

      - name: Package assets
        run: |
          zip --junk-paths dropbear-armv7a-linux-androideabi.zip \
              armv7a-linux-androideabi/*
          zip --junk-paths dropbear-aarch64-linux-android.zip \
              aarch64-linux-android/*
          zip --junk-paths dropbear-i686-linux-android.zip \
              i686-linux-android/*
          zip --junk-paths dropbear-x86_64-linux-android.zip \
              x86_64-linux-android/*

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: 11

      - name: Package JAR
        run: |
          mkdir -p lib/armeabi-v7a lib/arm64-v8a lib/x86 lib/x86_64 META-INF
          cp -p armv7a-linux-androideabi/dropbear lib/armeabi-v7a/libdropbear.so
          cp -p armv7a-linux-androideabi/dbclient lib/armeabi-v7a/libdbclient.so
          cp -p armv7a-linux-androideabi/dropbearkey \
                lib/armeabi-v7a/libdropbearkey.so
          cp -p armv7a-linux-androideabi/dropbearconvert \
                lib/armeabi-v7a/libdropbearconvert.so
          cp -p armv7a-linux-androideabi/scp lib/armeabi-v7a/libscp.so
          cp -p aarch64-linux-android/dropbear lib/arm64-v8a/libdropbear.so
          cp -p aarch64-linux-android/dbclient lib/arm64-v8a/libdbclient.so
          cp -p aarch64-linux-android/dropbearkey \
                lib/arm64-v8a/libdropbearkey.so
          cp -p aarch64-linux-android/dropbearconvert \
                lib/arm64-v8a/libdropbearconvert.so
          cp -p aarch64-linux-android/scp lib/arm64-v8a/libscp.so
          cp -p i686-linux-android/dropbear lib/x86/libdropbear.so
          cp -p i686-linux-android/dbclient lib/x86/libdbclient.so
          cp -p i686-linux-android/dropbearkey lib/x86/libdropbearkey.so
          cp -p i686-linux-android/dropbearconvert lib/x86/libdropbearconvert.so
          cp -p i686-linux-android/scp lib/x86/libscp.so
          cp -p x86_64-linux-android/dropbear lib/x86_64/libdropbear.so
          cp -p x86_64-linux-android/dbclient lib/x86_64/libdbclient.so
          cp -p x86_64-linux-android/dropbearkey lib/x86_64/libdropbearkey.so
          cp -p x86_64-linux-android/dropbearconvert \
                lib/x86_64/libdropbearconvert.so
          cp -p x86_64-linux-android/scp lib/x86_64/libscp.so
          cp -p aarch64-linux-android/LICENSE.txt META-INF/LICENSE
          jar cf android-dropbear.jar lib META-INF

      - name: Create release
        if: >
          env.BUILD_RELEASE != steps.latest_release.outputs.result &&
          github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            console.log("Creating release")

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.BUILD_RELEASE,
              name: process.env.BUILD_RELEASE,
              body: "Dropbear SSH binaries built for Android with NDK " +
                    "version " + process.env.NDK_VERSION,
            })

            const assets = [
              'dropbear-armv7a-linux-androideabi.zip',
              'dropbear-aarch64-linux-android.zip',
              'dropbear-i686-linux-android.zip',
              'dropbear-x86_64-linux-android.zip',
              'android-dropbear.jar',
            ]

            for(const asset of assets) {
              console.log("Uploading " + asset)
              await github.rest.repos.uploadReleaseAsset({
                headers: {
                  "content-type": asset.endsWith(".jar") ?
                    "application/java-archive" : "application/zip",
                },
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                data: fs.readFileSync(asset),
                name: asset,
              })
            }

      - name: Upload JAR to package registry
        if: >
          env.BUILD_RELEASE != steps.latest_release.outputs.result &&
          github.event_name == 'push' && github.ref == 'refs/heads/master' &&
          !contains(env.BUILD_RELEASE, 'pre')
        run: |
          mvn --batch-mode deploy:deploy-file \
            -DgroupId=com.nerdoftheherd \
            -DartifactId=android-dropbear \
            -Dversion="${{ env.JAR_VERSION }}" \
            -Dfile=android-dropbear.jar \
            -DrepositoryId=github \
            -Durl=https://maven.pkg.github.com/ribbons/android-dropbear \
            -DgeneratePom.description="Dropbear binaries built for Android \
          with NDK version ${{ env.NDK_VERSION }}."
        env:
          GITHUB_TOKEN: ${{ github.token }}
